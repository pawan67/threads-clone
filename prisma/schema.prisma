generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  bio           String    @default("")
  username      String    @unique @default(cuid())
  isEdited      Boolean   @default(false)
  onboarded     Boolean   @default(false)
  isPrivate     Boolean   @default(false)
  image         String
  accounts      Account[]
  sessions      Session[]
  threads       Thread[]

  followedBy User[] @relation("UserFollows")
  following  User[] @relation("UserFollows")

  role                  Role           @default(USER)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now()) @updatedAt
  likes                 Likes[]
  repost                Repost[]
  // Define the relation to sent notifications
  sentNotifications     Notification[] @relation("SentNotifications")
  // Define the relation to received notifications
  receivedNotifications Notification[] @relation("ReceivedNotifications")
}

model Thread {
  id            String          @id @default(cuid())
  content       Json
  authorId      String
  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  parentId      String?
  parent        Thread?         @relation("ParentChildren", fields: [parentId], references: [id])
  children      Thread[]        @relation("ParentChildren")
  updatedAt     DateTime        @default(now()) @updatedAt
  likes         Likes[]
  repost        Repost?
  Notifications Notification[]
}

model Likes {
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@id([threadId, userId])
}

model Repost {
  id         String @id @default(cuid())
  threadId   String @unique
  thread     Thread @relation(fields: [threadId], references: [id])
  reposter   User   @relation(fields: [reposterId], references: [id])
  reposterId String
}

model Notification {
  id         String           @id @default(cuid())
  senderId   String
  receiverId String
  sender     User             @relation("SentNotifications", fields: [senderId], references: [id])
  receiver   User             @relation("ReceivedNotifications", fields: [receiverId], references: [id])
  read       Boolean          @default(false)
  type       NotificationType
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt
  userId     String?
  thread     Thread?          @relation(fields: [threadId], references: [id])
  threadId   String?
}

enum NotificationType {
  LIKE
  REPOST
  FOLLOW
  NEWPOST
  REPLY
}

enum Role {
  USER
  ADMIN
}
